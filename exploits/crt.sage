import requests
import sys
import math

users = sys.argv[1].split(',')

# Vulnerability 2: the RSA implementation does not use (secure) padding
# When a message is sent to at least e people, where e is the shared public key, we have:
# flag ^ e = msg_0 mod N_0
# ...
# flag ^ e = msg_i mod N_i
# With the chinese remainder theorem we can get a k with k == flag^e mod N_0 * ... * N_i
# Because flag < N_i (or else the message cannot be decrypted) and we have e messages, k^e < N_0 * ... * N_i
# Therefore, we can just calculate the e-th root of k and this is our flag
# To make this attack practical, the public exponent for uploaded keys is set to 7,
# therefore we need only 7 messages instead of 65537 which is most of the time used as the pubkey in RSA
keys = [[int(x, 16) for x in requests.get('http://localhost:5000/pubkey/' + user).json()] for user in users]
N = [k[0] for k in keys]
assert all(k[1] == keys[0][1] for k in keys), "Public exponent is different"
e = keys[0][1]
print("Public Exponent:", e)

msg = [int(requests.get('http://localhost:5000/inbox/' + user).json()[0], 16) for user in users]

k = crt(msg, N)

print(int(k.nth_root(e)).to_bytes(1024, byteorder='big').strip(b'\x00').decode())
