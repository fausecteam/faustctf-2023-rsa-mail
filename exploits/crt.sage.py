

# This file was *autogenerated* from the file crt.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_16 = Integer(16); _sage_const_0 = Integer(0); _sage_const_1024 = Integer(1024)
import requests
import sys
import math

users = sys.argv[_sage_const_1 ].split(',')

# Vulnerability 2: Public exponent is 7 and our RSA implementation does not use padding
# Even for uploaded private keys
# When a message is sent to at least 5 people, we have:
# flag ^ 7 = msg_0 mod N_0
# flag ^ 7 = msg_1 mod N_1
# ...
# flag ^ 7 = msg_7 mod N_7
# With the chinese remainder theorem we can get a k with k == flag^7 mod N_0 * ... * N_7
# Because flag < N_i (or else the message cannot be decrypted), k^7 < N_0 * ... * N_7
# Therefore, we can just calculate the cubic root of k and this is our flag
keys = [[int(x, _sage_const_16 ) for x in requests.get('http://localhost:5000/pubkey/' + user).json()] for user in users]
N = [k[_sage_const_0 ] for k in keys]
assert all(k[_sage_const_1 ] == keys[_sage_const_0 ][_sage_const_1 ] for k in keys), "Public exponent is different"
e = keys[_sage_const_0 ][_sage_const_1 ]
print("Public Exponent:", e)

msg = [int(requests.get('http://localhost:5000/inbox/' + user).json()[_sage_const_0 ], _sage_const_16 ) for user in users]

k = crt(msg, N)

print(int(k.nth_root(e)).to_bytes(_sage_const_1024 , byteorder='big').strip(b'\x00').decode() + "Q")

